1. 워크스페이스
C:\class\code\server

2. 프로그램 확인
- Eclipse 2022-06 > eclipse.ini > -vm
C:/Program Files/Java/jdk-11/bin/javaw.exe 
- Tomcat 8.5
- JDK  11
- Oracle  ex 21c

3. 이클립스 설정
- encoding
	- workspace > UTF-8
	- CSS Files > UTF-8
	- HTML Files > UTF-8
	- JSP Files > UTF-8
- server (Runtime Evironments) 
	- Tomcat 연결
- servers 탭
 	- tomcat 객체 생성
	- 포트번호 > 8090 변경 

conf > server.xml 

    <Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443"
               maxParameterCount="1000"
               />

    <Connector port="8090" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443"
               maxParameterCount="1000"
               />

-  프로젝트 생성
- New> Dynamic Web Project
 > Project name : "ServletTest"
 > Target runtime : Tomcat v8.5
 > module : 3.1 
 > generate web.xml deployment descriptor 반드시 체크


webapp  - 루트 폴더

-----------------------------------


서버측 + 웹 기술
- Servlet
- JSP
- Spring
-----------
데이터베이스 연동
- JDBC
- MyBatis
- Spring JDBC
- JPA

웹 페이지
1. 정적 페이지 > 요청때마다 소스가 변함없는 페이지
2. 동적 페이지 > 요청때마다 소스가 변화있는 페이지

Servlet, 서블릿
- 웹서버에서 자바를 사용한 프로그램을 동작시키는 기술
- 프로그램의 역할 > 웹 페이지 생성
- 웹서버측에서 동적으로 웹 페이지를 생산하는 기술

Servlet Class
- 바리스타(알바생)
- 클라이언트 요청에 따라 동적으로 웹 페이지를 생산하는 클래스

톰캣
- 웹서버(Web Server) + 웹 응용프로그램 서버(WAS)

Servelt/JSP Container <== Servelt/JSP Engine
- 서버측에서 Servlet/jsp를 실행할 수 있도록 해주는 환경
- Servlet/JSP와 관련된 객체 생성, 실행, 소멸 등 전반적인 관리
- 대표 컨테이너 > 톰캣(Tomcat)


Servlet Class 작성 규칙 > 알바생 생성

1. 서블릿 클래스 선언 > 순수 자바(X), 서블릿 API 사용(O)
	a. javax.servlet.Servlet 인터페이스를 구현한다. > 복잡함. 고비용.
	b. javax.servlet.http.HttpServelt 클래스를 상속받는다. > 단순함. 저비용.

2. doGet/doPost 메소드 선언
	- 둘 중 하나 선언 or 둘 다 선언
	- 클라이언트(브라우저)의 요청이 들어오면 자동으로 호출되는 메소드 > "주문"
	- 커피 만드는 메소드 >  HTML 페이지를 만드는 메소드
	- 메소드 작성 규칙
		a. 매개 변수 작성
			1. java.servlet.http.httpServletRequest
			2. java.servlet.http.httpServletResponse
		b. 예외 미루기
			1. java.io.IOException
			2. java.servlet.ServletException

3. 동적 HTML 페이지 작성
	- doGet/doPost 내부에서  HTML 문서를 작성하기 위한 자바 코드를 작성한다. (개발자) > 미리 계획을 작성한다.
	- HttpServletResponse 객체의 getWriter() 메소드 호출 > PrintWriter 객체 반환
	- PrintWriter 객체 == 페이지를 제작하는 도구
	- printXXX("페이지 태그 or 내용"); > 동적으로 페이지 제작
	- 페이지 완성 > 브라우저에게 반환

4. 서블릿 호출
	- 순수 자바는 웹 기술이 아니다 > 웹에서는 자바 프로그램을 호출할 수 없다
	- 톰캣이 그 요청을 받아서 대신 자바프로그램을 호출한다 (Servlet Container)
	- 자바 프로그램을 호출하기 위한 가상 주소를 생성
	- webapp > WEB-INF > web.xml(톰캣 환경 설정 파일)
	- 만약 web.xml 이 없는 경우,  프로젝트 > Java EE tools > Generate ..Stub 생성하면 된다


- Java Resources > src/main/java > "com.test.servlet" 패키지 > "EX01.java"





데이터 주고 받기
- 폼(<form>) > 전송 > 서버(수신)

- Ex03_Send.java
- Ex03_Recevie.java 


-----------------Servlet 끝

Servlet == JSP
- JSP는 서블릿이다
- Serlvet > 자바 기반 + 클라이언트(문자열 취급)
- JSP > HTML 기반 + 자바 코드 

1. Servlet
2. JSP
3. Servlet + JSP 



Hello ~ 
- webapp > "ex01.jsp"


--------------톰캣이 인식하는 부분 
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
    
    
  JSP 구성 요소
  1. JSP 지시자, JSP Directive
  	- <%@ %>
  	- page 지시자
  	- include 지시자
  	- taglib 지시자
   
  2. 스크립트 요소, Scripting Elements
   - 자바 코드와 연관있는 기능들
	- <% %>
	- 스크립틀릿
	- 익스프레션
	- 선언부
	 
  3. 액션 태그, Action Tags
  	- <jsp:XXX>, <c:XXX>
  	- 기본 액션 태그
  	- 확장 액션 태그
  	- 사용자 정의 액션 태그
  	
  	
  	page 지시자
  	- ex03.jsp
  	
  	- JSP 페이지 실행 환경 설정 > 톰캣에게 알려준다
  	- JSP 페이지에 항상 첫줄에 작성
  	- 1개 이상 작성 가능
  	
  	- <%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
    a. language="java"
    	- JSP 페이지에서 사용할 프로그래밍 언어 지정
    	
    b. contentType="text/html; charset=UTF-8"
    	- JSP 페이지의 콘텐츠에 대한 기술
    	- text/html : MIME 타입 > HTML 문서 > 브라우저에게 전달
    	- charset=UTF-8 : 인코딩 > HTML 문서 > 브라우저에게 전달
    	
    c. pageEncoding="UTF-8"
    	- 현재 JSP 페이지의 인코딩
    	
   include 지시자
   - "ex04.jsp"
   - "login.jsp"
   
   - <%@ include file="URL" %>
   - 특정 JSP 페이지(HTML, Text 등)를 현재 JSP 페이지의 일부분으로 삽입하는 기술
   - 조각 페이지
  	
  	
  	스크립틀릿 + 익스프레션
  	
  	스크립틀릿, Scriptlet
  	- <% %>
  	- Script + Applet
  	- HTML 영역에서 Java 문법을 사용 가능하게 하는 영역을 제공.
  	- 비즈니스 코드 작성
  	
  	익스프레션, Expression
  	- <%= %>
  	- 자바의 값을 HTML 문서(***)에 출력하는 역할
  	- 브라우저 화면에 출력하는게 아니다(***)
  	- System.out.println() 역할
  	
  	- "ex05_script.jsp"
  	 - "ex06_script.jsp"
  	 
  	 
 선언부, Declaration
 - <%! %>
 - 멤버 변수와 멤버 메소드를 선언하는 영역
 - ex01.jsp
 - "ex08.jsp"
 
 
 JSP 실행 순서(톰캣 주체)
 1. ex01.jsp > (변환) > ex01.java 서블릿
 2. ex01.java 컴파일 > ex01.class
 3. ex01.class 실행 > doGet 호출
 4. 임시 페이지 완성
 5. 임시 페이지 반환 
 
 C:\class\code\server\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\jsp\org\apache\jsp
 
 
 
 
 JSP 내장 객체, JSP Implicit Object
 - 개발자가 직접 생성하지 않아도, 톰캣이 미리 만들어서 제공하는 객체
 - 예약어로 제공
 - request, response, session, pageContext (*****)
 - out, application
 - config, page, exception
 
 
 ***** (외우기) pageContext, request, session, application
 		- 객체 내부에 사용자 데이터를 저장할 수 있는 컬렉션(Map)을 가지고 있다.
 		- void setAttribute(String key, Object value)
 		- Object getAttribute(String key)
 		- HashMap 처럼 생각하면 됨
 		
 		
1. request
- HttpServletRequest
- 서블릿의 doGet/doPost의 첫번째 매개변수
- 주로 클라이언트측에서 서버측으로 발생하는 모든 업무를 관여한다.

1. 클라이언트에서 서버로 전송한 데이터를 가져오기
	- ex10_form.jsp : 사용자 입력을 받는 페이지(Ex03_Send.java)
	- ex10_ok.jsp : 전송된 데이터를 수신하는 페이지 (Ex03_Receive.java)
	
	- ex11_form.jsp : 
	- ex11_ok.jsp :

2. 클라이언트에서 서버로 전송한 데이터의 인코딩 처리

3. 클라이언트에서 서버로 전송할 때의 정보를 가져오기


- "ex09_request.jsp"


response
- HttpServletResponse
- 서블릿의 doGet/doPost의 두번째 매개변수
- 주로 서버측에서 클라이언트측으로 발생하는 모든 업무를 관여한다.

1. 돌려줄 HTML 페이지 제작
	- response.getWriter() > PrintWriter > HTML 제작
	- 서블릿 > 작성O
	- JSP > 암시적
	
2. 돌려줄 HTML 페이지 인코딩 설정

	- response.setCharacterEncoding("UTF-8");
	- 서블릿 > 작성 O
	- JSP > 페이지 지시자 > contentType="text/html; charset=UTF-8"

3. 돌려줄 HTML 페이지 MIME 설정
	- contentType="text/html"
	- 파일 업로드 수업 때 

4. 페이지 이동하기
	- ex14_response_1.jsp
	- ex14_response_2.jsp
	
pageContext
	- ex15_pagecontext_1.jsp
	- ex15_pagecontext_2.jsp
	

내장 객체의 생명 주기
- pageContext, request(response), session, application
- pageContext : 생성(페이지 요청) ~ 소멸(페이지 반환)  // 가장 짧음
-  request : 생성(페이지 요청) ~ 소멸(페이지 반환)
				생성(처음 페이지 요청) ~ 페이지  이동( forward) ~ 소멸(다음 페이지 반환)
				

out
- 출력 객체 
- JSP 방식이 아닌 Servlet 방식의 출력을 지원한다.
- ex16_out.jsp


session & application
- session > 개인 정보 관리 객체 > (자바) 객체 변수
- application > 사이트 정보 관리 객체 > (자바) 정적 변수(=공용 정보)

- ex17_session.jsp

	<!--  application, session, pageContext, request, response 순으로 만들어 지며,
	페이지가 종료되면 pageContext, request, response가 죽고, 
	사용자가 사이트를 나가는 순간 session이 죽고, 
	사이트에 사용자가 아무도 없는 순간 application 죽는다 (생명 주기가 가장 길다) 

*** 웹은 비연결성을 가진다.(Connectionless)
